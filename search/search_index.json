{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"\ud83d\udcd8 Theoretical Foundation: Equations of Motion We analyze a projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) above the horizontal. We assume: - No air resistance, - The projectile is launched from and lands at the same vertical level, - The only acceleration is due to gravity \\( g \\) . \ud83e\udded Resolving Initial Velocity: The initial velocity has two components: Horizontal (x-direction) : $$ v_{0x} = v_0 \\cos(\\theta) $$ Vertical (y-direction) : $$ v_{0y} = v_0 \\sin(\\theta) $$ \ud83d\udd39 Horizontal Motion: No acceleration in the horizontal direction (uniform motion): Position over time: $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ Velocity: $$ v_x(t) = v_0 \\cos(\\theta) = \\text{constant} $$ \ud83d\udd38 Vertical Motion: There is constant downward acceleration due to gravity: Position over time: $$ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Velocity over time: $$ v_y(t) = v_0 \\sin(\\theta) - g t $$ Acceleration: $$ a_y = -g $$ \ud83d\udd52 Time of Flight: To find the total time the projectile is in the air, we solve \\( y(T) = 0 \\) : \\[ 0 = v_0 \\sin(\\theta) \\cdot T - \\frac{1}{2} g T^2 \\] Factoring out \\( T \\neq 0 \\) : \\[ T = \\frac{2 v_0 \\sin(\\theta)}{g} \\] \ud83d\udccf Horizontal Range: Range is the total horizontal distance traveled during time \\( T \\) : \\[ R = v_0 \\cos(\\theta) \\cdot T \\] Substitute \\( T \\) : \\[ R = v_0 \\cos(\\theta) \\cdot \\left( \\frac{2 v_0 \\sin(\\theta)}{g} \\right) \\] Simplify: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] \u23eb Maximum Height: The projectile reaches maximum height when vertical velocity is zero: [ v_y = 0 = v_0 \\sin(\\theta) - g t \\Rightarrow t_{\\text{max}} = \\frac{v_0 \\sin(\\theta)}{g} ] Now, plug into the vertical position equation: [ H_{\\text{max}} = y(t_{\\text{max}}) = v_0 \\sin(\\theta) \\cdot \\frac{v_0 \\sin(\\theta)}{g} - \\frac{1}{2} g \\left( \\frac{v_0 \\sin(\\theta)}{g} \\right)^2 ] Simplify: \\[ H_{\\text{max}} = \\frac{v_0^2 \\sin^2(\\theta)}{2g} \\] \u2705 Summary of Key Equations Quantity Formula Horizontal Position \\( x(t) = v_0 \\cos(\\theta) \\cdot t \\) Vertical Position \\( y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 \\) Time of Flight \\( T = \\frac{2 v_0 \\sin(\\theta)}{g} \\) Maximum Height \\( H = \\frac{v_0^2 \\sin^2(\\theta)}{2g} \\) Range \\( R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\) Would you like me to export all this into a Markdown (.md) or LaTeX (.tex) file for easy formatting in your project or paper? Here's a starting point for your project on projectile motion. The code: Derives and plots the horizontal range as a function of the launch angle (from 0\u00b0 to 90\u00b0). Simulates the projectile trajectory for a specific angle (e.g., 45\u00b0). Uses ideal conditions: no air resistance, flat ground, constant gravity. Next steps could include: Varying initial velocity and observing the effect. Adding air resistance (e.g., using a drag coefficient). Simulating on uneven terrain or with wind.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#theoretical-foundation-equations-of-motion","text":"We analyze a projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) above the horizontal. We assume: - No air resistance, - The projectile is launched from and lands at the same vertical level, - The only acceleration is due to gravity \\( g \\) .","title":"\ud83d\udcd8 Theoretical Foundation: Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#resolving-initial-velocity","text":"The initial velocity has two components: Horizontal (x-direction) : $$ v_{0x} = v_0 \\cos(\\theta) $$ Vertical (y-direction) : $$ v_{0y} = v_0 \\sin(\\theta) $$","title":"\ud83e\udded Resolving Initial Velocity:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-motion","text":"No acceleration in the horizontal direction (uniform motion): Position over time: $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ Velocity: $$ v_x(t) = v_0 \\cos(\\theta) = \\text{constant} $$","title":"\ud83d\udd39 Horizontal Motion:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-motion","text":"There is constant downward acceleration due to gravity: Position over time: $$ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Velocity over time: $$ v_y(t) = v_0 \\sin(\\theta) - g t $$ Acceleration: $$ a_y = -g $$","title":"\ud83d\udd38 Vertical Motion:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight","text":"To find the total time the projectile is in the air, we solve \\( y(T) = 0 \\) : \\[ 0 = v_0 \\sin(\\theta) \\cdot T - \\frac{1}{2} g T^2 \\] Factoring out \\( T \\neq 0 \\) : \\[ T = \\frac{2 v_0 \\sin(\\theta)}{g} \\]","title":"\ud83d\udd52 Time of Flight:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-range","text":"Range is the total horizontal distance traveled during time \\( T \\) : \\[ R = v_0 \\cos(\\theta) \\cdot T \\] Substitute \\( T \\) : \\[ R = v_0 \\cos(\\theta) \\cdot \\left( \\frac{2 v_0 \\sin(\\theta)}{g} \\right) \\] Simplify: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\]","title":"\ud83d\udccf Horizontal Range:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#maximum-height","text":"The projectile reaches maximum height when vertical velocity is zero: [ v_y = 0 = v_0 \\sin(\\theta) - g t \\Rightarrow t_{\\text{max}} = \\frac{v_0 \\sin(\\theta)}{g} ] Now, plug into the vertical position equation: [ H_{\\text{max}} = y(t_{\\text{max}}) = v_0 \\sin(\\theta) \\cdot \\frac{v_0 \\sin(\\theta)}{g} - \\frac{1}{2} g \\left( \\frac{v_0 \\sin(\\theta)}{g} \\right)^2 ] Simplify: \\[ H_{\\text{max}} = \\frac{v_0^2 \\sin^2(\\theta)}{2g} \\]","title":"\u23eb Maximum Height:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#summary-of-key-equations","text":"Quantity Formula Horizontal Position \\( x(t) = v_0 \\cos(\\theta) \\cdot t \\) Vertical Position \\( y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 \\) Time of Flight \\( T = \\frac{2 v_0 \\sin(\\theta)}{g} \\) Maximum Height \\( H = \\frac{v_0^2 \\sin^2(\\theta)}{2g} \\) Range \\( R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\) Would you like me to export all this into a Markdown (.md) or LaTeX (.tex) file for easy formatting in your project or paper? Here's a starting point for your project on projectile motion. The code: Derives and plots the horizontal range as a function of the launch angle (from 0\u00b0 to 90\u00b0). Simulates the projectile trajectory for a specific angle (e.g., 45\u00b0). Uses ideal conditions: no air resistance, flat ground, constant gravity. Next steps could include: Varying initial velocity and observing the effect. Adding air resistance (e.g., using a drag coefficient). Simulating on uneven terrain or with wind.","title":"\u2705 Summary of Key Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2: Investigating the Dynamics of a Forced Damped Pendulum \ud83c\udfaf Motivation The forced damped pendulum is a classic example of a physical system exhibiting complex dynamics. It arises from the interplay between: Damping : The dissipative force that slows down the pendulum. Restoring Force : The force that brings the pendulum back to its equilibrium position. External Driving Force : A periodic force driving the pendulum, potentially leading to resonance and chaotic motion. This system models real-world phenomena such as driven oscillators, mechanical resonance, climate systems, and energy harvesting devices. The main focus is to explore how damping, driving force, and resonance contribute to the pendulum's behavior. 1\ufe0f\u20e3 Theoretical Foundation Governing Equation The motion of a forced damped pendulum is described by the second-order differential equation: \\[ \\frac{d^2 \\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(\\omega t) \\] Where: - \\( \\theta \\) = Angular displacement - \\( b \\) = Damping coefficient - \\( g \\) = Gravitational acceleration - \\( L \\) = Length of the pendulum - \\( A \\) = Amplitude of the external driving force - \\( \\omega \\) = Angular frequency of the driving force Small-Angle Approximation For small oscillations, we approximate \\( \\sin(\\theta) \\approx \\theta \\) , which simplifies the equation to: \\[ \\frac{d^2 \\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(\\omega t) \\] This is a standard forced damped harmonic oscillator , and its solution can be derived using methods for second-order linear differential equations. Solution for Small-Amplitude Oscillations The general solution to the equation for small-angle oscillations is given by: \\[ \\theta(t) = \\theta_0 e^{-\\gamma t} \\cos(\\omega_0 t + \\delta) + \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b \\omega)^2}} \\cos(\\omega t - \\phi) \\] Where: - \\( \\omega_0 = \\sqrt{\\frac{g}{L}} \\) is the natural frequency of the pendulum - \\( \\gamma = \\frac{b}{2} \\) is the damping coefficient - \\( \\theta_0 \\) and \\( \\delta \\) are determined by initial conditions - \\( \\phi \\) is the phase shift that depends on the driving force and damping Resonance Condition Resonance occurs when the driving frequency \\( \\omega \\) matches the natural frequency \\( \\omega_0 \\) . At this point, the amplitude of oscillation increases significantly, potentially leading to large oscillations. Energy Considerations The total energy in a forced damped system includes both the kinetic energy (due to the motion of the pendulum) and the potential energy (due to the displacement from equilibrium), along with energy input from the driving force and energy loss due to damping. At resonance, the system absorbs energy most efficiently, which can result in an increase in amplitude. 2\ufe0f\u20e3 Analysis of Dynamics We will now explore how the damping coefficient, driving amplitude, and driving frequency influence the pendulum's motion. We will also analyze the transition from regular to chaotic motion. Damping Effects Increasing the damping coefficient \\( b \\) will cause the pendulum to lose energy faster, leading to smaller oscillations. For large damping, the system will quickly settle to equilibrium. Driving Amplitude and Frequency The amplitude \\( A \\) and frequency \\( \\omega \\) of the driving force determine the extent and nature of oscillations: - Small driving amplitudes lead to periodic oscillations with small amplitude. - Large driving amplitudes may cause large, sustained oscillations, especially near resonance. - Frequency detuning can lead to complex behaviors, including chaotic motion when the system is far from resonance. Transition to Chaos At certain values of \\( A \\) , \\( \\omega \\) , and \\( b \\) , the system may undergo transitions to chaotic behavior. This is characterized by sensitive dependence on initial conditions , where small changes in the initial state lead to vastly different outcomes. 3\ufe0f\u20e3 Practical Applications The forced damped pendulum model has several practical applications, such as: - Energy Harvesting : Devices that extract energy from ambient vibrations, using resonance to maximize energy absorption. - Suspension Bridges : Analyzing the response of a bridge to periodic driving forces like wind gusts. - Mechanical Circuits : Driven RLC circuits, which behave similarly to forced damped oscillators. 4\ufe0f\u20e3 Implementation We will now implement a Python model to simulate the motion of a forced damped pendulum under varying damping, driving force, and initial conditions. We will visualize the pendulum's motion and analyze transitions to chaotic behavior using phase portraits and Poincar\u00e9 sections . Phase Diagram and Poincar\u00e9 Section To study the system's behavior, we can generate phase portraits and Poincar\u00e9 sections to observe transitions to chaos and other complex behaviors. 5\ufe0f\u20e3 Deliverables Markdown document with theoretical explanations and code. Python simulations of the forced damped pendulum. Graphical representations of motion under varying conditions. Phase portraits and Poincar\u00e9 sections showing transitions to chaos. 6\ufe0f\u20e3 Discussion of Limitations and Extensions Limitations: The model assumes small angle approximations. The damping is assumed to be linear; in real systems, nonlinear damping may occur. The system is driven by a periodic force; more general forcing functions (e.g., random or aperiodic forces) can introduce different dynamics. Extensions: Include nonlinear damping or non-periodic driving forces for more realistic simulations. Explore the effects of external noise or multiple driving frequencies .","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2-investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Problem 2: Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The forced damped pendulum is a classic example of a physical system exhibiting complex dynamics. It arises from the interplay between: Damping : The dissipative force that slows down the pendulum. Restoring Force : The force that brings the pendulum back to its equilibrium position. External Driving Force : A periodic force driving the pendulum, potentially leading to resonance and chaotic motion. This system models real-world phenomena such as driven oscillators, mechanical resonance, climate systems, and energy harvesting devices. The main focus is to explore how damping, driving force, and resonance contribute to the pendulum's behavior.","title":"\ud83c\udfaf Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"1\ufe0f\u20e3 Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-equation","text":"The motion of a forced damped pendulum is described by the second-order differential equation: \\[ \\frac{d^2 \\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(\\omega t) \\] Where: - \\( \\theta \\) = Angular displacement - \\( b \\) = Damping coefficient - \\( g \\) = Gravitational acceleration - \\( L \\) = Length of the pendulum - \\( A \\) = Amplitude of the external driving force - \\( \\omega \\) = Angular frequency of the driving force","title":"Governing Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small oscillations, we approximate \\( \\sin(\\theta) \\approx \\theta \\) , which simplifies the equation to: \\[ \\frac{d^2 \\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\theta = A \\cos(\\omega t) \\] This is a standard forced damped harmonic oscillator , and its solution can be derived using methods for second-order linear differential equations.","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#solution-for-small-amplitude-oscillations","text":"The general solution to the equation for small-angle oscillations is given by: \\[ \\theta(t) = \\theta_0 e^{-\\gamma t} \\cos(\\omega_0 t + \\delta) + \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b \\omega)^2}} \\cos(\\omega t - \\phi) \\] Where: - \\( \\omega_0 = \\sqrt{\\frac{g}{L}} \\) is the natural frequency of the pendulum - \\( \\gamma = \\frac{b}{2} \\) is the damping coefficient - \\( \\theta_0 \\) and \\( \\delta \\) are determined by initial conditions - \\( \\phi \\) is the phase shift that depends on the driving force and damping","title":"Solution for Small-Amplitude Oscillations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-condition","text":"Resonance occurs when the driving frequency \\( \\omega \\) matches the natural frequency \\( \\omega_0 \\) . At this point, the amplitude of oscillation increases significantly, potentially leading to large oscillations.","title":"Resonance Condition"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#energy-considerations","text":"The total energy in a forced damped system includes both the kinetic energy (due to the motion of the pendulum) and the potential energy (due to the displacement from equilibrium), along with energy input from the driving force and energy loss due to damping. At resonance, the system absorbs energy most efficiently, which can result in an increase in amplitude.","title":"Energy Considerations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"We will now explore how the damping coefficient, driving amplitude, and driving frequency influence the pendulum's motion. We will also analyze the transition from regular to chaotic motion.","title":"2\ufe0f\u20e3 Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#damping-effects","text":"Increasing the damping coefficient \\( b \\) will cause the pendulum to lose energy faster, leading to smaller oscillations. For large damping, the system will quickly settle to equilibrium.","title":"Damping Effects"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#driving-amplitude-and-frequency","text":"The amplitude \\( A \\) and frequency \\( \\omega \\) of the driving force determine the extent and nature of oscillations: - Small driving amplitudes lead to periodic oscillations with small amplitude. - Large driving amplitudes may cause large, sustained oscillations, especially near resonance. - Frequency detuning can lead to complex behaviors, including chaotic motion when the system is far from resonance.","title":"Driving Amplitude and Frequency"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#transition-to-chaos","text":"At certain values of \\( A \\) , \\( \\omega \\) , and \\( b \\) , the system may undergo transitions to chaotic behavior. This is characterized by sensitive dependence on initial conditions , where small changes in the initial state lead to vastly different outcomes.","title":"Transition to Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"The forced damped pendulum model has several practical applications, such as: - Energy Harvesting : Devices that extract energy from ambient vibrations, using resonance to maximize energy absorption. - Suspension Bridges : Analyzing the response of a bridge to periodic driving forces like wind gusts. - Mechanical Circuits : Driven RLC circuits, which behave similarly to forced damped oscillators.","title":"3\ufe0f\u20e3 Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation","text":"We will now implement a Python model to simulate the motion of a forced damped pendulum under varying damping, driving force, and initial conditions. We will visualize the pendulum's motion and analyze transitions to chaotic behavior using phase portraits and Poincar\u00e9 sections .","title":"4\ufe0f\u20e3 Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#phase-diagram-and-poincare-section","text":"To study the system's behavior, we can generate phase portraits and Poincar\u00e9 sections to observe transitions to chaos and other complex behaviors.","title":"Phase Diagram and Poincar\u00e9 Section"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-deliverables","text":"Markdown document with theoretical explanations and code. Python simulations of the forced damped pendulum. Graphical representations of motion under varying conditions. Phase portraits and Poincar\u00e9 sections showing transitions to chaos.","title":"5\ufe0f\u20e3 Deliverables"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#6-discussion-of-limitations-and-extensions","text":"","title":"6\ufe0f\u20e3 Discussion of Limitations and Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#limitations","text":"The model assumes small angle approximations. The damping is assumed to be linear; in real systems, nonlinear damping may occur. The system is driven by a periodic force; more general forcing functions (e.g., random or aperiodic forces) can introduce different dynamics.","title":"Limitations:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#extensions","text":"Include nonlinear damping or non-periodic driving forces for more realistic simulations. Explore the effects of external noise or multiple driving frequencies .","title":"Extensions:"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Gravity: Kepler's Third Law (T\u00b2 \u221d r\u00b3) 1.1.1 Derivation for Circular Orbits Force Balance Equation For a circular orbit, gravitational force equals centripetal force: \\[ \\frac{GMm}{r^2} = \\frac{mv^2}{r} \\] Orbital Velocity Relation \\[ v = \\frac{2\\pi r}{T} \\] Substitution and Simplification \\[ \\frac{GM}{r^2} = \\frac{(2\\pi r/T)^2}{r} \\implies T^2 = \\frac{4\\pi^2 r^3}{GM} \\] Final Form: [ \\boxed{T^2 = \\left(\\frac{4\\pi^2}{GM}\\right) r^3} ] 1.1.2. Python Simulation import numpy as np import matplotlib.pyplot as plt from scipy.constants import G # Constants M_earth = 5.972e24 # kg radii = np.linspace(3.8e8, 4.0e8, 100) # 380,000-400,000 km (Moon's orbit range) # Calculate periods periods = np.sqrt(4 * np.pi**2 * radii**3 / (G * M_earth)) / (24*3600) # in days # Plotting fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14,5)) # Orbit visualization theta = np.linspace(0, 2*np.pi, 100) ax1.plot(np.cos(theta), np.sin(theta), 'b-') ax1.set_title(\"Circular Orbit\") ax1.set_aspect('equal') ax1.grid() # Kepler's Law verification ax2.plot(radii**3, periods**2, 'r-') ax2.set_xlabel('r\u00b3 (m\u00b3)') ax2.set_ylabel('T\u00b2 (days\u00b2)') ax2.set_title(\"Kepler's Third Law Verification\") ax2.grid() plt.tight_layout() plt.show() 1.1.3. Graphical Representations Figure 1: Circular Orbit Figure 2: T\u00b2 vs r\u00b3 Relationship # Output from the Python code above (The right plot shows a perfect linear relationship confirming T\u00b2 \u221d r\u00b3) 1.1.4. Extension to Elliptical Orbits Generalized Kepler's Third Law \\[ \\boxed{T^2 = \\frac{4\\pi^2 a^3}{G(M+m)}} \\] Where: - \\( a \\) = semi-major axis - \\( M \\) = primary mass - \\( m \\) = secondary mass Comparison Table Feature Circular Orbit Elliptical Orbit Shape Perfect circle Ellipse Radius Constant \\( r \\) Varies (min: perihelion, max: aphelion) Kepler's Law \\( T^2 \\propto r^3 \\) \\( T^2 \\propto a^3 \\) 1.1.5. Astronomical Applications Solar System Examples Body Orbital Radius (AU) Period (years) T\u00b2/r\u00b3 Mercury 0.387 0.241 1.000 Earth 1.000 1.000 1.000 Mars 1.524 1.881 1.000 Key Implications Mass Determination : Measure \\( M \\) by observing \\( T \\) and \\( r \\) Exoplanet Detection : Detect planets via orbital period variations Space Mission Planning : Calculate transfer orbits between planets 1.1.6. Conclusion Kepler's Third Law fundamentally links orbital geometry with dynamics Verified numerically through Python simulation Generalizes to elliptical orbits via semi-major axis Essential tool for modern astronomy and space exploration Astronomical Implications of Kepler's Third Law 1.2.1 Fundamental Importance in Astronomy Kepler's Third Law (T\u00b2 \u221d r\u00b3) serves as a fundamental tool for: - Determining celestial masses - Measuring astronomical distances - Verifying gravitational theories - Planning space missions Planetary Mass Formula: \\[ \\boxed{M = \\dfrac{4\\pi^2 r^3}{G T^2}} \\] B. Determining Astronomical Distances Technique: Used when direct measurement is impossible: 1. Measure orbital period spectroscopically 2. Solve for orbital radius using Kepler's Law Case Study: Binary star systems - the only direct method to measure stellar masses. C. Exoplanet Detection Radial Velocity Method: - Measures star's wobble period (T) - Derives planet's orbital distance (r) - Estimates minimum planet mass Data Table: Sample Exoplanet Parameters | Exoplanet | Period (days) | Orbital Radius (AU) | Mass Estimate (M\u2295) | |-----------|--------------|---------------------|--------------------| | Kepler-186f | 129.9 | 0.432 | 1.44 | | TRAPPIST-1e | 6.10 | 0.038 | 0.62 | 1.2.3. Graphical Representations Figure 2: Exoplanet Period-Distance Relation import matplotlib.pyplot as plt # Data for known exoplanets periods = [0.73, 1.51, 4.05, 10.2, 129.9] # days distances = [0.015, 0.028, 0.049, 0.12, 0.432] # AU plt.loglog(periods, distances, 'bo') plt.xlabel('Orbital Period (days)') plt.ylabel('Semi-Major Axis (AU)') plt.title('Kepler\\'s Third Law for Exoplanets') plt.grid(which='both') plt.show() 1.2.6. Modern Astronomical Applications Application Kepler's Law Usage Precision Required GPS Satellites Orbit synchronization 10\u207b\u2079 seconds Galaxy Rotation Curves Dark matter studies 1% distance accuracy Pulsar Timing Gravity wave detection 10\u207b\u00b9\u2075 timing 1.2.7. Conclusion Mass Measurement: Primary method for determining celestial object masses Distance Scale: Establishes cosmic distance ladder rungs Exoplanet Science: Foundation for characterizing alien worlds Theoretical Test: Validates modifications to Newtonian gravity Real-World Analysis of Kepler's Third Law 1.3.1. Solar System Case Studies A. Earth-Moon System Here\u2019s the Earth-Moon System in a format similar to what you would find in a textbook: Verification using Kepler's Third Law \\[ T^2 = \\frac{4\\pi^2 r^3}{GM} \\] Substitute the values: \\[ T^2 = \\frac{4\\pi^2 (3.844 \\times 10^8)^3}{6.674 \\times 10^{-11} \\times 5.972 \\times 10^{24}} \\] \\[ T^2 \\approx 7.35 \\times 10^{12} \\, \\text{s}^2 \\] Now, compare with the square of the orbital period: \\[ (27.32 \\times 24 \\times 3600)^2 \\approx 7.35 \\times 10^{12} \\, \\text{s}^2 \\] Thus, Kepler\u2019s Third Law is verified \u2705 This format is textbook-style and will display correctly in LaTeX-compatible systems (e.g., Markdown, PDF, Word, TeX). B. Planetary Orbits Comparison Planet Orbital Radius (AU) Period (years) T\u00b2/r\u00b3 Mercury 0.387 0.241 1.002 Venus 0.723 0.615 0.999 Earth 1.000 1.000 1.000 Mars 1.524 1.881 1.000 Jupiter 5.203 11.86 0.997 Key Observation: The near-unity values confirm Kepler's Law across the solar system. 1.3.2. Python Solar System Analyzer import numpy as np import matplotlib.pyplot as plt from scipy.constants import G, astronomical_unit as AU # Solar system data (radius in AU, period in years) planets = { 'Mercury': (0.387, 0.241), 'Venus': (0.723, 0.615), 'Earth': (1.000, 1.000), 'Mars': (1.524, 1.881), 'Jupiter': (5.203, 11.86) } # Calculate and plot T\u00b2 vs r\u00b3 radii = np.array([p[0] for p in planets.values()]) periods = np.array([p[1] for p in planets.values()]) plt.figure(figsize=(10,6)) plt.plot(radii**3, periods**2, 'ro', markersize=8) plt.plot([0,200], [0,200], 'b--') # Reference line y=x plt.xlabel('Orbital Radius Cubed (AU\u00b3)') plt.ylabel('Orbital Period Squared (years\u00b2)') plt.title('Solar System Verification of Kepler\\'s Third Law') plt.grid(True) plt.show() Output Interpretation: All planets fall on the y=x line, validating T\u00b2 \u221d r\u00b3. 1.3.3. Artificial Satellite Analysis Geostationary Orbit Example Required period: 23.93 hours (1 sidereal day) Calculated altitude: [ r = \\left(\\frac{GMT\u00b2}{4\u03c0\u00b2}\\right)^{1/3} \u2248 42,164 km \\text{ from Earth's center} ] Comparison Table: Earth Satellites Satellite Type Altitude (km) Period (hrs) T\u00b2/r\u00b3 (\u00d710\u207b\u00b9\u2076) ISS 400 1.53 1.02 GPS 20,200 11.97 0.99 Geostationary 35,786 23.93 1.00 1.3.4. Elliptical Orbit Case: Halley's Comet Orbital Parameters: - Semi-major axis (a): 17.8 AU - Eccentricity (e): 0.967 - Period calculation: [ T = \\sqrt{a\u00b3} = \\sqrt{17.8^3} \u2248 75.3 \\text{ years} ] Visualization Code: import numpy as np import matplotlib.pyplot as plt # Elliptical orbit parameters a = 17.8 # AU e = 0.967 theta = np.linspace(0, 2*np.pi, 1000) r = a*(1-e**2)/(1+e*np.cos(theta)) # Polar plot plt.figure(figsize=(8,8)) ax = plt.subplot(111, projection='polar') ax.plot(theta, r, 'b-') ax.set_title(\"Halley's Comet Orbit (a=17.8 AU, e=0.967)\", pad=20) plt.show() 1.3.6. Limitations and Corrections Significant Effects: 1. Relativistic Precession: Mercury's orbit shows 43\"/century deviation 2. Multi-body Perturbations: Jupiter's influence on asteroid belt 3. Tidal Forces: Earth-Moon system evolution Correction Formula (Post-Newtonian): [ T^2 \u2248 \\frac{4\u03c0\u00b2a\u00b3}{GM}\\left(1 + \\frac{3GM}{c\u00b2a}\\right) ] Gravity Simulation with Multiple Graphical Outputs 1.4.1 Core Orbit Simulation Code ## 1.4.2 Multiple Visualization Types A. Standard 2D Orbit Plot # Run simulation positions = [] for _ in range(steps): r_mag = np.linalg.norm(pos) accel = -G*M*pos/r_mag**3 vel += accel*dt pos += vel*dt positions.append(pos.copy()) positions = np.array(positions) # Plot orbit plt.figure(figsize=(8,8)) plt.plot(positions[:,0], positions[:,1], 'b-') plt.scatter([0], [0], c='yellow', s=300) plt.xlabel('X Position (m)') plt.ylabel('Y Position (m)') plt.title(f'Orbit Simulation (e={e})') plt.grid() plt.axis('equal') plt.show()","title":"Gravity: Kepler's Third Law (T\u00b2 \u221d r\u00b3)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#gravity-keplers-third-law-t2-r3","text":"","title":"Gravity: Kepler's Third Law (T\u00b2 \u221d r\u00b3)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#111-derivation-for-circular-orbits","text":"","title":"1.1.1 Derivation for Circular Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#force-balance-equation","text":"For a circular orbit, gravitational force equals centripetal force: \\[ \\frac{GMm}{r^2} = \\frac{mv^2}{r} \\]","title":"Force Balance Equation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-velocity-relation","text":"\\[ v = \\frac{2\\pi r}{T} \\]","title":"Orbital Velocity Relation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#substitution-and-simplification","text":"\\[ \\frac{GM}{r^2} = \\frac{(2\\pi r/T)^2}{r} \\implies T^2 = \\frac{4\\pi^2 r^3}{GM} \\] Final Form: [ \\boxed{T^2 = \\left(\\frac{4\\pi^2}{GM}\\right) r^3} ]","title":"Substitution and Simplification"},{"location":"1%20Physics/2%20Gravity/Problem_1/#112-python-simulation","text":"import numpy as np import matplotlib.pyplot as plt from scipy.constants import G # Constants M_earth = 5.972e24 # kg radii = np.linspace(3.8e8, 4.0e8, 100) # 380,000-400,000 km (Moon's orbit range) # Calculate periods periods = np.sqrt(4 * np.pi**2 * radii**3 / (G * M_earth)) / (24*3600) # in days # Plotting fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14,5)) # Orbit visualization theta = np.linspace(0, 2*np.pi, 100) ax1.plot(np.cos(theta), np.sin(theta), 'b-') ax1.set_title(\"Circular Orbit\") ax1.set_aspect('equal') ax1.grid() # Kepler's Law verification ax2.plot(radii**3, periods**2, 'r-') ax2.set_xlabel('r\u00b3 (m\u00b3)') ax2.set_ylabel('T\u00b2 (days\u00b2)') ax2.set_title(\"Kepler's Third Law Verification\") ax2.grid() plt.tight_layout() plt.show()","title":"1.1.2. Python Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#113-graphical-representations","text":"","title":"1.1.3. Graphical Representations"},{"location":"1%20Physics/2%20Gravity/Problem_1/#figure-1-circular-orbit","text":"","title":"Figure 1: Circular Orbit"},{"location":"1%20Physics/2%20Gravity/Problem_1/#figure-2-t2-vs-r3-relationship","text":"# Output from the Python code above (The right plot shows a perfect linear relationship confirming T\u00b2 \u221d r\u00b3)","title":"Figure 2: T\u00b2 vs r\u00b3 Relationship"},{"location":"1%20Physics/2%20Gravity/Problem_1/#114-extension-to-elliptical-orbits","text":"","title":"1.1.4. Extension to Elliptical Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#generalized-keplers-third-law","text":"\\[ \\boxed{T^2 = \\frac{4\\pi^2 a^3}{G(M+m)}} \\] Where: - \\( a \\) = semi-major axis - \\( M \\) = primary mass - \\( m \\) = secondary mass","title":"Generalized Kepler's Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#comparison-table","text":"Feature Circular Orbit Elliptical Orbit Shape Perfect circle Ellipse Radius Constant \\( r \\) Varies (min: perihelion, max: aphelion) Kepler's Law \\( T^2 \\propto r^3 \\) \\( T^2 \\propto a^3 \\)","title":"Comparison Table"},{"location":"1%20Physics/2%20Gravity/Problem_1/#115-astronomical-applications","text":"","title":"1.1.5. Astronomical Applications"},{"location":"1%20Physics/2%20Gravity/Problem_1/#solar-system-examples","text":"Body Orbital Radius (AU) Period (years) T\u00b2/r\u00b3 Mercury 0.387 0.241 1.000 Earth 1.000 1.000 1.000 Mars 1.524 1.881 1.000","title":"Solar System Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#key-implications","text":"Mass Determination : Measure \\( M \\) by observing \\( T \\) and \\( r \\) Exoplanet Detection : Detect planets via orbital period variations Space Mission Planning : Calculate transfer orbits between planets","title":"Key Implications"},{"location":"1%20Physics/2%20Gravity/Problem_1/#116-conclusion","text":"Kepler's Third Law fundamentally links orbital geometry with dynamics Verified numerically through Python simulation Generalizes to elliptical orbits via semi-major axis Essential tool for modern astronomy and space exploration","title":"1.1.6. Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_1/#astronomical-implications-of-keplers-third-law","text":"","title":"Astronomical Implications of Kepler's Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#121-fundamental-importance-in-astronomy","text":"Kepler's Third Law (T\u00b2 \u221d r\u00b3) serves as a fundamental tool for: - Determining celestial masses - Measuring astronomical distances - Verifying gravitational theories - Planning space missions Planetary Mass Formula: \\[ \\boxed{M = \\dfrac{4\\pi^2 r^3}{G T^2}} \\]","title":"1.2.1 Fundamental Importance in Astronomy"},{"location":"1%20Physics/2%20Gravity/Problem_1/#b-determining-astronomical-distances","text":"Technique: Used when direct measurement is impossible: 1. Measure orbital period spectroscopically 2. Solve for orbital radius using Kepler's Law Case Study: Binary star systems - the only direct method to measure stellar masses.","title":"B. Determining Astronomical Distances"},{"location":"1%20Physics/2%20Gravity/Problem_1/#c-exoplanet-detection","text":"Radial Velocity Method: - Measures star's wobble period (T) - Derives planet's orbital distance (r) - Estimates minimum planet mass Data Table: Sample Exoplanet Parameters | Exoplanet | Period (days) | Orbital Radius (AU) | Mass Estimate (M\u2295) | |-----------|--------------|---------------------|--------------------| | Kepler-186f | 129.9 | 0.432 | 1.44 | | TRAPPIST-1e | 6.10 | 0.038 | 0.62 |","title":"C. Exoplanet Detection"},{"location":"1%20Physics/2%20Gravity/Problem_1/#123-graphical-representations","text":"","title":"1.2.3. Graphical Representations"},{"location":"1%20Physics/2%20Gravity/Problem_1/#figure-2-exoplanet-period-distance-relation","text":"import matplotlib.pyplot as plt # Data for known exoplanets periods = [0.73, 1.51, 4.05, 10.2, 129.9] # days distances = [0.015, 0.028, 0.049, 0.12, 0.432] # AU plt.loglog(periods, distances, 'bo') plt.xlabel('Orbital Period (days)') plt.ylabel('Semi-Major Axis (AU)') plt.title('Kepler\\'s Third Law for Exoplanets') plt.grid(which='both') plt.show()","title":"Figure 2: Exoplanet Period-Distance Relation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#126-modern-astronomical-applications","text":"Application Kepler's Law Usage Precision Required GPS Satellites Orbit synchronization 10\u207b\u2079 seconds Galaxy Rotation Curves Dark matter studies 1% distance accuracy Pulsar Timing Gravity wave detection 10\u207b\u00b9\u2075 timing","title":"1.2.6. Modern Astronomical Applications"},{"location":"1%20Physics/2%20Gravity/Problem_1/#127-conclusion","text":"Mass Measurement: Primary method for determining celestial object masses Distance Scale: Establishes cosmic distance ladder rungs Exoplanet Science: Foundation for characterizing alien worlds Theoretical Test: Validates modifications to Newtonian gravity","title":"1.2.7. Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_1/#real-world-analysis-of-keplers-third-law","text":"","title":"Real-World Analysis of Kepler's Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#131-solar-system-case-studies","text":"","title":"1.3.1. Solar System Case Studies"},{"location":"1%20Physics/2%20Gravity/Problem_1/#a-earth-moon-system","text":"Here\u2019s the Earth-Moon System in a format similar to what you would find in a textbook:","title":"A. Earth-Moon System"},{"location":"1%20Physics/2%20Gravity/Problem_1/#verification-using-keplers-third-law","text":"\\[ T^2 = \\frac{4\\pi^2 r^3}{GM} \\] Substitute the values: \\[ T^2 = \\frac{4\\pi^2 (3.844 \\times 10^8)^3}{6.674 \\times 10^{-11} \\times 5.972 \\times 10^{24}} \\] \\[ T^2 \\approx 7.35 \\times 10^{12} \\, \\text{s}^2 \\] Now, compare with the square of the orbital period: \\[ (27.32 \\times 24 \\times 3600)^2 \\approx 7.35 \\times 10^{12} \\, \\text{s}^2 \\] Thus, Kepler\u2019s Third Law is verified \u2705 This format is textbook-style and will display correctly in LaTeX-compatible systems (e.g., Markdown, PDF, Word, TeX).","title":"Verification using Kepler's Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#b-planetary-orbits-comparison","text":"Planet Orbital Radius (AU) Period (years) T\u00b2/r\u00b3 Mercury 0.387 0.241 1.002 Venus 0.723 0.615 0.999 Earth 1.000 1.000 1.000 Mars 1.524 1.881 1.000 Jupiter 5.203 11.86 0.997 Key Observation: The near-unity values confirm Kepler's Law across the solar system.","title":"B. Planetary Orbits Comparison"},{"location":"1%20Physics/2%20Gravity/Problem_1/#132-python-solar-system-analyzer","text":"import numpy as np import matplotlib.pyplot as plt from scipy.constants import G, astronomical_unit as AU # Solar system data (radius in AU, period in years) planets = { 'Mercury': (0.387, 0.241), 'Venus': (0.723, 0.615), 'Earth': (1.000, 1.000), 'Mars': (1.524, 1.881), 'Jupiter': (5.203, 11.86) } # Calculate and plot T\u00b2 vs r\u00b3 radii = np.array([p[0] for p in planets.values()]) periods = np.array([p[1] for p in planets.values()]) plt.figure(figsize=(10,6)) plt.plot(radii**3, periods**2, 'ro', markersize=8) plt.plot([0,200], [0,200], 'b--') # Reference line y=x plt.xlabel('Orbital Radius Cubed (AU\u00b3)') plt.ylabel('Orbital Period Squared (years\u00b2)') plt.title('Solar System Verification of Kepler\\'s Third Law') plt.grid(True) plt.show() Output Interpretation: All planets fall on the y=x line, validating T\u00b2 \u221d r\u00b3.","title":"1.3.2. Python Solar System Analyzer"},{"location":"1%20Physics/2%20Gravity/Problem_1/#133-artificial-satellite-analysis","text":"","title":"1.3.3. Artificial Satellite Analysis"},{"location":"1%20Physics/2%20Gravity/Problem_1/#geostationary-orbit-example","text":"Required period: 23.93 hours (1 sidereal day) Calculated altitude: [ r = \\left(\\frac{GMT\u00b2}{4\u03c0\u00b2}\\right)^{1/3} \u2248 42,164 km \\text{ from Earth's center} ] Comparison Table: Earth Satellites Satellite Type Altitude (km) Period (hrs) T\u00b2/r\u00b3 (\u00d710\u207b\u00b9\u2076) ISS 400 1.53 1.02 GPS 20,200 11.97 0.99 Geostationary 35,786 23.93 1.00","title":"Geostationary Orbit Example"},{"location":"1%20Physics/2%20Gravity/Problem_1/#134-elliptical-orbit-case-halleys-comet","text":"Orbital Parameters: - Semi-major axis (a): 17.8 AU - Eccentricity (e): 0.967 - Period calculation: [ T = \\sqrt{a\u00b3} = \\sqrt{17.8^3} \u2248 75.3 \\text{ years} ] Visualization Code: import numpy as np import matplotlib.pyplot as plt # Elliptical orbit parameters a = 17.8 # AU e = 0.967 theta = np.linspace(0, 2*np.pi, 1000) r = a*(1-e**2)/(1+e*np.cos(theta)) # Polar plot plt.figure(figsize=(8,8)) ax = plt.subplot(111, projection='polar') ax.plot(theta, r, 'b-') ax.set_title(\"Halley's Comet Orbit (a=17.8 AU, e=0.967)\", pad=20) plt.show()","title":"1.3.4. Elliptical Orbit Case: Halley's Comet"},{"location":"1%20Physics/2%20Gravity/Problem_1/#136-limitations-and-corrections","text":"Significant Effects: 1. Relativistic Precession: Mercury's orbit shows 43\"/century deviation 2. Multi-body Perturbations: Jupiter's influence on asteroid belt 3. Tidal Forces: Earth-Moon system evolution Correction Formula (Post-Newtonian): [ T^2 \u2248 \\frac{4\u03c0\u00b2a\u00b3}{GM}\\left(1 + \\frac{3GM}{c\u00b2a}\\right) ]","title":"1.3.6. Limitations and Corrections"},{"location":"1%20Physics/2%20Gravity/Problem_1/#gravity-simulation-with-multiple-graphical-outputs","text":"","title":"Gravity Simulation with Multiple Graphical Outputs"},{"location":"1%20Physics/2%20Gravity/Problem_1/#141-core-orbit-simulation-code","text":"","title":"1.4.1 Core Orbit Simulation Code"},{"location":"1%20Physics/2%20Gravity/Problem_1/#142-multiple-visualization-types","text":"","title":"## 1.4.2 Multiple Visualization Types"},{"location":"1%20Physics/2%20Gravity/Problem_1/#a-standard-2d-orbit-plot","text":"# Run simulation positions = [] for _ in range(steps): r_mag = np.linalg.norm(pos) accel = -G*M*pos/r_mag**3 vel += accel*dt pos += vel*dt positions.append(pos.copy()) positions = np.array(positions) # Plot orbit plt.figure(figsize=(8,8)) plt.plot(positions[:,0], positions[:,1], 'b-') plt.scatter([0], [0], c='yellow', s=300) plt.xlabel('X Position (m)') plt.ylabel('Y Position (m)') plt.title(f'Orbit Simulation (e={e})') plt.grid() plt.axis('equal') plt.show()","title":"A. Standard 2D Orbit Plot"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"2.1 Definitions and Physical Meaning First Cosmic Velocity (Orbital Velocity) Definition : The minimum velocity needed to maintain a stable circular orbit around a celestial body. Formula : $$ v_1 = \\sqrt{\\frac{GM}{R}} $$ Physical Meaning : The orbital velocity balances the gravitational pull with the centripetal force, keeping the object in orbit without falling toward the body or escaping from it. Second Cosmic Velocity (Escape Velocity) Definition : The minimum velocity needed to completely escape a celestial body's gravitational influence. Formula : $$ v_2 = \\sqrt{\\frac{2GM}{R}} = \\sqrt{2} \\times v_1 $$ Physical Meaning : This velocity provides enough kinetic energy to overcome the gravitational potential energy of the celestial body and break free from its gravitational field. Third Cosmic Velocity (Solar System Escape Velocity) Definition : The velocity required at Earth's orbit to escape the Sun's gravitational influence. Formula : $$ v_3 = \\sqrt{v_{\\text{esc}, \\odot}^2 + v_{\\text{orb}, \\oplus}^2} $$ Where: \\(v_{\\text{esc}, \\odot}\\) = Escape velocity from the Sun at Earth's orbit (~42.1 km/s) \\(v_{\\text{orb}, \\oplus}\\) = Earth's orbital velocity (~29.8 km/s) Physical Meaning : This velocity is required to escape the combined gravitational forces of the Sun and Earth, typically considered for interstellar missions. Let me know when you're ready to send the next task, and I will follow the same format. 2.2 Graphical Representations A. Velocity Comparison Chart # Bar chart of velocities names = list(results.keys()) v1 = [x[0]/1000 for x in results.values()] # km/s v2 = [x[1]/1000 for x in results.values()] x = np.arange(len(names)) width = 0.35 fig, ax = plt.subplots(figsize=(10,6)) bars1 = ax.bar(x - width/2, v1, width, label='1st Cosmic (Orbital)') bars2 = ax.bar(x + width/2, v2, width, label='2nd Cosmic (Escape)') ax.set_ylabel('Velocity (km/s)') ax.set_title('Cosmic Velocities for Different Celestial Bodies') ax.set_xticks(x) ax.set_xticklabels(names) ax.legend() ax.grid(axis='y') plt.show() ## **1.4 Graphical Representations** ### **Example Calculation (Earth)** \\[ v_1 = \\sqrt{\\frac{6.674\\times10^{-11} \\times 5.972\\times10^{24}}{6.371\\times10^6}} \\approx 7.91 \\text{ km/s} \\] \\[ v_2 = \\sqrt{2} \\times 7.91 \\approx 11.19 \\text{ km/s} \\] \\[ v_3 = \\sqrt{29.8^2 + (42.1-29.8)^2} \\approx 16.6 \\text{ km/s} \\] ![alt text](image-8.png) ## **7. Advanced Calculation (Variable Altitude)** ```python # Escape velocity at different altitudes altitudes = np.linspace(0, 1000, 100)*1000 # 0-1000 km R_earth = bodies['Earth'][0] v_esc = np.sqrt(2*G*bodies['Earth'][1]/(R_earth + altitudes)) plt.figure(figsize=(10,6)) plt.plot(altitudes/1000, v_esc/1000) plt.xlabel('Altitude (km)') plt.ylabel('Escape Velocity (km/s)') plt.title('Escape Velocity vs Altitude (Earth)') plt.grid() plt.show() This complete analysis provides: - Clear definitions of cosmic velocities - Computational verification - Multiple visualization methods - Practical examples and applications Mathematical Analysis of Cosmic Velocities Got it! Here's the markdown for Visual Studio Code with the required mathematical notations: 1.2.1 Fundamental Derivations First Cosmic Velocity (Orbital Velocity) Derivation from Force Balance : $$ \\frac{GMm}{r^2} = \\frac{mv_1^2}{r} \\implies v_1 = \\sqrt{\\frac{GM}{r}} $$ Key Parameters : \\(G\\) : Gravitational constant (6.674\u00d710\u207b\u00b9\u00b9 N\u00b7m\u00b2/kg\u00b2) \\(M\\) : Central body mass \\(r\\) : Distance from the center (radius + altitude) Second Cosmic Velocity (Escape Velocity) Energy Conservation Approach : $$ \\frac{1}{2}mv_2^2 - \\frac{GMm}{r} = 0 \\implies v_2 = \\sqrt{\\frac{2GM}{r}} $$ Critical Insight : Escape velocity is exactly \\(\\sqrt{2}\\) times the orbital velocity Independent of projectile mass Third Cosmic Velocity (Solar System Escape) Vector Summation : $$ v_3 = \\sqrt{v_{\\text{esc,\u2299}}^2 + (v_{\\text{orb,\u2295}} - v_{\\text{esc,\u2295}})^2} $$ Where: \\(v_{\\text{esc,\u2299}}\\) : Solar escape velocity at Earth's orbit (~42.1 km/s) \\(v_{\\text{orb,\u2295}}\\) : Earth's orbital speed (~29.8 km/s) This should be easy to copy and paste into Visual Studio Code now. Let me know if you need any further adjustments! 1.2.3 Comparative Planetary Analysis # Solar system bodies data bodies = { 'Mercury': (2.439e6, 3.301e23), 'Venus': (6.052e6, 4.867e24), 'Earth': (6.371e6, 5.972e24), 'Mars': (3.390e6, 6.417e23), 'Jupiter': (6.991e7, 1.899e27) } # Calculate and compare data = [] for name, (R, M) in bodies.items(): v1 = np.sqrt(G*M/R)/1000 v2 = np.sqrt(2)*v1 data.append([name, R/1e6, M/5.972e24, v1, v2]) # Create table import pandas as pd df = pd.DataFrame(data, columns=['Body', 'Radius (Mm)', 'Mass (M\u2295)', '1st Cosmic (km/s)', '2nd Cosmic (km/s)']) print(df.to_markdown(index=False)) Body Radius (Mm) Mass (M\u2295) 1st Cosmic (km/s) 2nd Cosmic (km/s) Mercury 2.439 0.055 3.01 4.25 Venus 6.052 0.815 7.33 10.36 Earth 6.371 1.000 7.91 11.19 Mars 3.390 0.107 3.55 5.03 Jupiter 69.91 317.8 42.06 59.49 1.2.4 Altitude Effects Visualization # Earth altitude analysis R_earth = 6.371e6 altitudes = np.linspace(0, 2000, 100)*1000 # 0-2000 km plt.figure(figsize=(10,6)) plt.plot(altitudes/1000, np.sqrt(G*5.972e24/(R_earth + altitudes))/1000, label='Orbital') plt.plot(altitudes/1000, np.sqrt(2*G*5.972e24/(R_earth + altitudes))/1000, label='Escape') plt.xlabel('Altitude (km)') plt.ylabel('Velocity (km/s)') plt.title('Velocity vs Altitude for Earth') plt.legend() plt.grid() plt.show() Critical Points: - ISS altitude (~400 km): 7.67 km/s orbital - Geostationary orbit (~35,786 km): 3.07 km/s orbital 1.2.5 Practical Implications Space Mission Design Considerations: 1. Launch Windows : - Equatorial launches gain ~0.46 km/s from Earth's rotation 2. Gravity Assists : - Voyager missions saved ~18 km/s \u0394v using planetary flybys 3. Propulsion Requirements : - Moon mission: \u0394v ~15.9 km/s - Mars mission: \u0394v ~21 km/s (with optimal alignment) Energy Equivalent: [ \\Delta E = \\frac{1}{2}m(v_2^2 - v_1^2) ] For 1kg payload from Earth surface to LEO: [ \\Delta E \\approx 33 \\text{ MJ/kg} ] **1.3 Cosmic Velocities Calculator Core Physics Formulas Here is how the formulas will appear if correctly rendered in a Markdown-supported LaTeX environment: Cosmic Velocities and Escape Velocities Here are the cosmic velocity formulas in proper Markdown format with clear mathematical notation Where: - \\( v_{\\text{esc}} \\) = Escape velocity from the planet - \\( v_{\\text{planet}} \\) = Planet's orbital speed around the Sun - \\( v_{\\text{sun\\_esc}} \\) = Escape velocity from Sun at planet's orbit (\u224842.1 km/s at 1 AU) Example Values (Earth) Velocity Type Formula Value (km/s) Orbital \\( \\sqrt{GM_{\\oplus}/R_{\\oplus}} \\) 7.91 Escape \\( \\sqrt{2} \\times v_{\\text{orb}} \\) 11.19 Solar Escape \\( \\sqrt{v_{\\text{esc}}^2 + (v_{\\oplus} - v_{\\odot\\text{esc}})^2} \\) 16.65 Results Visualization ``` Numerical Results Calculated Values (km/s) Body 1st Cosmic 2nd Cosmic 3rd Cosmic Earth 7.91 11.19 16.65 Mars 3.55 5.03 7.82 Jupiter 42.06 59.49 60.35 Key Observations Planetary Differences : Jupiter requires much higher velocities due to its massive size Mars has significantly lower requirements than Earth Altitude Effects : Escape velocity decreases with altitude 400 km altitude (ISS): ~7.67 km/s orbital, ~10.85 km/s escape Solar System Escape : Earth requires additional ~5.5 km/s beyond planetary escape Jupiter's strong gravity helps with solar escape (only +0.86 km/s needed) Practical Implications Spacecraft Design : Must account for different planetary requirements Mission Planning : Gravity assists can reduce needed velocity changes Human Exploration : Mars' lower velocities make it more accessible than Jupiter Here is your Markdown document for Problem 2: Escape Velocities and Cosmic Velocities with detailed explanations, code for simulations, and graphical representations of escape velocities and cosmic velocities: 1.4. Here\u2019s a concise version of the formulas and Python code to calculate and visualize the Orbital Velocity , Escape Velocity , and Solar System Escape (3rd Cosmic Velocity) . Formulas Orbital Velocity (1st Cosmic) : [ v_{orb} = \\sqrt{\\frac{GM}{r}} ] Escape Velocity (2nd Cosmic) : [ v_{esc} = \\sqrt{\\frac{2GM}{r}} = \\sqrt{2} \\times v_{orb} ] Solar System Escape Velocity (3rd Cosmic) : [ v_3 = \\sqrt{v_{esc}^2 + (v_{planet} - v_{sun_esc})^2} ]","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#21-definitions-and-physical-meaning","text":"","title":"2.1 Definitions and Physical Meaning"},{"location":"1%20Physics/2%20Gravity/Problem_2/#first-cosmic-velocity-orbital-velocity","text":"Definition : The minimum velocity needed to maintain a stable circular orbit around a celestial body. Formula : $$ v_1 = \\sqrt{\\frac{GM}{R}} $$ Physical Meaning : The orbital velocity balances the gravitational pull with the centripetal force, keeping the object in orbit without falling toward the body or escaping from it.","title":"First Cosmic Velocity (Orbital Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#second-cosmic-velocity-escape-velocity","text":"Definition : The minimum velocity needed to completely escape a celestial body's gravitational influence. Formula : $$ v_2 = \\sqrt{\\frac{2GM}{R}} = \\sqrt{2} \\times v_1 $$ Physical Meaning : This velocity provides enough kinetic energy to overcome the gravitational potential energy of the celestial body and break free from its gravitational field.","title":"Second Cosmic Velocity (Escape Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#third-cosmic-velocity-solar-system-escape-velocity","text":"Definition : The velocity required at Earth's orbit to escape the Sun's gravitational influence. Formula : $$ v_3 = \\sqrt{v_{\\text{esc}, \\odot}^2 + v_{\\text{orb}, \\oplus}^2} $$ Where: \\(v_{\\text{esc}, \\odot}\\) = Escape velocity from the Sun at Earth's orbit (~42.1 km/s) \\(v_{\\text{orb}, \\oplus}\\) = Earth's orbital velocity (~29.8 km/s) Physical Meaning : This velocity is required to escape the combined gravitational forces of the Sun and Earth, typically considered for interstellar missions. Let me know when you're ready to send the next task, and I will follow the same format.","title":"Third Cosmic Velocity (Solar System Escape Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#22-graphical-representations","text":"","title":"2.2 Graphical Representations"},{"location":"1%20Physics/2%20Gravity/Problem_2/#a-velocity-comparison-chart","text":"# Bar chart of velocities names = list(results.keys()) v1 = [x[0]/1000 for x in results.values()] # km/s v2 = [x[1]/1000 for x in results.values()] x = np.arange(len(names)) width = 0.35 fig, ax = plt.subplots(figsize=(10,6)) bars1 = ax.bar(x - width/2, v1, width, label='1st Cosmic (Orbital)') bars2 = ax.bar(x + width/2, v2, width, label='2nd Cosmic (Escape)') ax.set_ylabel('Velocity (km/s)') ax.set_title('Cosmic Velocities for Different Celestial Bodies') ax.set_xticks(x) ax.set_xticklabels(names) ax.legend() ax.grid(axis='y') plt.show() ## **1.4 Graphical Representations** ### **Example Calculation (Earth)** \\[ v_1 = \\sqrt{\\frac{6.674\\times10^{-11} \\times 5.972\\times10^{24}}{6.371\\times10^6}} \\approx 7.91 \\text{ km/s} \\] \\[ v_2 = \\sqrt{2} \\times 7.91 \\approx 11.19 \\text{ km/s} \\] \\[ v_3 = \\sqrt{29.8^2 + (42.1-29.8)^2} \\approx 16.6 \\text{ km/s} \\] ![alt text](image-8.png) ## **7. Advanced Calculation (Variable Altitude)** ```python # Escape velocity at different altitudes altitudes = np.linspace(0, 1000, 100)*1000 # 0-1000 km R_earth = bodies['Earth'][0] v_esc = np.sqrt(2*G*bodies['Earth'][1]/(R_earth + altitudes)) plt.figure(figsize=(10,6)) plt.plot(altitudes/1000, v_esc/1000) plt.xlabel('Altitude (km)') plt.ylabel('Escape Velocity (km/s)') plt.title('Escape Velocity vs Altitude (Earth)') plt.grid() plt.show() This complete analysis provides: - Clear definitions of cosmic velocities - Computational verification - Multiple visualization methods - Practical examples and applications","title":"A. Velocity Comparison Chart"},{"location":"1%20Physics/2%20Gravity/Problem_2/#mathematical-analysis-of-cosmic-velocities","text":"Got it! Here's the markdown for Visual Studio Code with the required mathematical notations:","title":"Mathematical Analysis of Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#121-fundamental-derivations","text":"","title":"1.2.1 Fundamental Derivations"},{"location":"1%20Physics/2%20Gravity/Problem_2/#first-cosmic-velocity-orbital-velocity_1","text":"Derivation from Force Balance : $$ \\frac{GMm}{r^2} = \\frac{mv_1^2}{r} \\implies v_1 = \\sqrt{\\frac{GM}{r}} $$ Key Parameters : \\(G\\) : Gravitational constant (6.674\u00d710\u207b\u00b9\u00b9 N\u00b7m\u00b2/kg\u00b2) \\(M\\) : Central body mass \\(r\\) : Distance from the center (radius + altitude)","title":"First Cosmic Velocity (Orbital Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#second-cosmic-velocity-escape-velocity_1","text":"Energy Conservation Approach : $$ \\frac{1}{2}mv_2^2 - \\frac{GMm}{r} = 0 \\implies v_2 = \\sqrt{\\frac{2GM}{r}} $$ Critical Insight : Escape velocity is exactly \\(\\sqrt{2}\\) times the orbital velocity Independent of projectile mass","title":"Second Cosmic Velocity (Escape Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#third-cosmic-velocity-solar-system-escape","text":"Vector Summation : $$ v_3 = \\sqrt{v_{\\text{esc,\u2299}}^2 + (v_{\\text{orb,\u2295}} - v_{\\text{esc,\u2295}})^2} $$ Where: \\(v_{\\text{esc,\u2299}}\\) : Solar escape velocity at Earth's orbit (~42.1 km/s) \\(v_{\\text{orb,\u2295}}\\) : Earth's orbital speed (~29.8 km/s) This should be easy to copy and paste into Visual Studio Code now. Let me know if you need any further adjustments!","title":"Third Cosmic Velocity (Solar System Escape)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#123-comparative-planetary-analysis","text":"# Solar system bodies data bodies = { 'Mercury': (2.439e6, 3.301e23), 'Venus': (6.052e6, 4.867e24), 'Earth': (6.371e6, 5.972e24), 'Mars': (3.390e6, 6.417e23), 'Jupiter': (6.991e7, 1.899e27) } # Calculate and compare data = [] for name, (R, M) in bodies.items(): v1 = np.sqrt(G*M/R)/1000 v2 = np.sqrt(2)*v1 data.append([name, R/1e6, M/5.972e24, v1, v2]) # Create table import pandas as pd df = pd.DataFrame(data, columns=['Body', 'Radius (Mm)', 'Mass (M\u2295)', '1st Cosmic (km/s)', '2nd Cosmic (km/s)']) print(df.to_markdown(index=False)) Body Radius (Mm) Mass (M\u2295) 1st Cosmic (km/s) 2nd Cosmic (km/s) Mercury 2.439 0.055 3.01 4.25 Venus 6.052 0.815 7.33 10.36 Earth 6.371 1.000 7.91 11.19 Mars 3.390 0.107 3.55 5.03 Jupiter 69.91 317.8 42.06 59.49","title":"1.2.3 Comparative Planetary Analysis"},{"location":"1%20Physics/2%20Gravity/Problem_2/#124-altitude-effects-visualization","text":"# Earth altitude analysis R_earth = 6.371e6 altitudes = np.linspace(0, 2000, 100)*1000 # 0-2000 km plt.figure(figsize=(10,6)) plt.plot(altitudes/1000, np.sqrt(G*5.972e24/(R_earth + altitudes))/1000, label='Orbital') plt.plot(altitudes/1000, np.sqrt(2*G*5.972e24/(R_earth + altitudes))/1000, label='Escape') plt.xlabel('Altitude (km)') plt.ylabel('Velocity (km/s)') plt.title('Velocity vs Altitude for Earth') plt.legend() plt.grid() plt.show() Critical Points: - ISS altitude (~400 km): 7.67 km/s orbital - Geostationary orbit (~35,786 km): 3.07 km/s orbital","title":"1.2.4 Altitude Effects Visualization"},{"location":"1%20Physics/2%20Gravity/Problem_2/#125-practical-implications","text":"Space Mission Design Considerations: 1. Launch Windows : - Equatorial launches gain ~0.46 km/s from Earth's rotation 2. Gravity Assists : - Voyager missions saved ~18 km/s \u0394v using planetary flybys 3. Propulsion Requirements : - Moon mission: \u0394v ~15.9 km/s - Mars mission: \u0394v ~21 km/s (with optimal alignment) Energy Equivalent: [ \\Delta E = \\frac{1}{2}m(v_2^2 - v_1^2) ] For 1kg payload from Earth surface to LEO: [ \\Delta E \\approx 33 \\text{ MJ/kg} ]","title":"1.2.5 Practical Implications"},{"location":"1%20Physics/2%20Gravity/Problem_2/#13-cosmic-velocities-calculator","text":"","title":"**1.3 Cosmic Velocities Calculator"},{"location":"1%20Physics/2%20Gravity/Problem_2/#core-physics-formulas","text":"Here is how the formulas will appear if correctly rendered in a Markdown-supported LaTeX environment:","title":"Core Physics Formulas"},{"location":"1%20Physics/2%20Gravity/Problem_2/#cosmic-velocities-and-escape-velocities","text":"Here are the cosmic velocity formulas in proper Markdown format with clear mathematical notation Where: - \\( v_{\\text{esc}} \\) = Escape velocity from the planet - \\( v_{\\text{planet}} \\) = Planet's orbital speed around the Sun - \\( v_{\\text{sun\\_esc}} \\) = Escape velocity from Sun at planet's orbit (\u224842.1 km/s at 1 AU)","title":"Cosmic Velocities and Escape Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#example-values-earth","text":"Velocity Type Formula Value (km/s) Orbital \\( \\sqrt{GM_{\\oplus}/R_{\\oplus}} \\) 7.91 Escape \\( \\sqrt{2} \\times v_{\\text{orb}} \\) 11.19 Solar Escape \\( \\sqrt{v_{\\text{esc}}^2 + (v_{\\oplus} - v_{\\odot\\text{esc}})^2} \\) 16.65","title":"Example Values (Earth)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#results-visualization","text":"```","title":"Results Visualization"},{"location":"1%20Physics/2%20Gravity/Problem_2/#numerical-results","text":"","title":"Numerical Results"},{"location":"1%20Physics/2%20Gravity/Problem_2/#calculated-values-kms","text":"Body 1st Cosmic 2nd Cosmic 3rd Cosmic Earth 7.91 11.19 16.65 Mars 3.55 5.03 7.82 Jupiter 42.06 59.49 60.35","title":"Calculated Values (km/s)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#key-observations","text":"Planetary Differences : Jupiter requires much higher velocities due to its massive size Mars has significantly lower requirements than Earth Altitude Effects : Escape velocity decreases with altitude 400 km altitude (ISS): ~7.67 km/s orbital, ~10.85 km/s escape Solar System Escape : Earth requires additional ~5.5 km/s beyond planetary escape Jupiter's strong gravity helps with solar escape (only +0.86 km/s needed)","title":"Key Observations"},{"location":"1%20Physics/2%20Gravity/Problem_2/#practical-implications","text":"Spacecraft Design : Must account for different planetary requirements Mission Planning : Gravity assists can reduce needed velocity changes Human Exploration : Mars' lower velocities make it more accessible than Jupiter Here is your Markdown document for Problem 2: Escape Velocities and Cosmic Velocities with detailed explanations, code for simulations, and graphical representations of escape velocities and cosmic velocities:","title":"Practical Implications"},{"location":"1%20Physics/2%20Gravity/Problem_2/#14-heres-a-concise-version-of-the-formulas-and-python-code-to-calculate-and-visualize-the-orbital-velocity-escape-velocity-and-solar-system-escape-3rd-cosmic-velocity","text":"","title":"1.4. Here\u2019s a concise version of the formulas and Python code to calculate and visualize the Orbital Velocity, Escape Velocity, and Solar System Escape (3rd Cosmic Velocity)."},{"location":"1%20Physics/2%20Gravity/Problem_2/#formulas","text":"Orbital Velocity (1st Cosmic) : [ v_{orb} = \\sqrt{\\frac{GM}{r}} ] Escape Velocity (2nd Cosmic) : [ v_{esc} = \\sqrt{\\frac{2GM}{r}} = \\sqrt{2} \\times v_{orb} ] Solar System Escape Velocity (3rd Cosmic) : [ v_3 = \\sqrt{v_{esc}^2 + (v_{planet} - v_{sun_esc})^2} ]","title":"Formulas"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3 Trajectories of Freely Released Payloads Near Earth 3.1.1 Key Results & Visualization Simulation Output Interpretation: - Circular (7.67 km/s) : Stable orbit (ISS-like) - Elliptical (9.0 km/s) : Higher apoapsis - Escape (11.0 km/s) : Parabolic departure - Hyperbolic (5.83 km/s) : High-velocity flyby 3.1.4 Applications Space Mission Scenarios Satellite Deployment Optimal release at perigee for fuel efficiency Typical \u0394v < 50 m/s for separation Space Debris Re-entry Deorbit burns reduce velocity to < 7.6 km/s Elliptical decay trajectories Lunar/Interplanetary Transfers Hohmann transfers (elliptical) Gravity assists (hyperbolic) Design Considerations Release altitude affects atmospheric drag Velocity vector determines trajectory shape Payload mass irrelevant in vacuum (all objects fall equally) 3.1.5 Conclusion Trajectory Types : Determined by initial velocity and position Energy Threshold : 0 MJ/kg separates bound/unbound orbits Mission Planning : Requires precise \u0394v calculations Numerical Methods : Essential for accurate predictions Extension Ideas : - Add J2 oblateness effects - Incorporate atmospheric drag models - Simulate multi-body gravity (Moon perturbations) **3.2.1 Here are the orbital mechanics formulas in proper mathematical notation: 1. Newton's Law of Universal Gravitation \\[ \\mathbf{F} = -G \\frac{m_1 m_2}{r^2} \\mathbf{\\hat{r}} \\] 2. Circular Orbital Velocity \\[ v_{\\text{circ}} = \\sqrt{\\frac{GM}{r}} \\] 3. Escape Velocity \\[ v_{\\text{esc}} = \\sqrt{\\frac{2GM}{r}} = \\sqrt{2} \\cdot v_{\\text{circ}} \\] 4. Specific Orbital Energy \\[ \\varepsilon = \\frac{v^2}{2} - \\frac{GM}{r} \\] 5. Orbital Period (Kepler's Third Law) \\[ T = 2\\pi \\sqrt{\\frac{a^3}{GM}} \\] 6. Vis-Viva Equation \\[ v^2 = GM \\left( \\frac{2}{r} - \\frac{1}{a} \\right) \\] 7. Eccentricity Vector \\[ \\mathbf{e} = \\frac{\\mathbf{v} \\times \\mathbf{h}}{GM} - \\frac{\\mathbf{r}}{r} \\] 8. Angular Momentum \\[ \\mathbf{h} = \\mathbf{r} \\times \\mathbf{v} \\] Where: - \\( G \\) = Gravitational constant (6.67430 \u00d7 10\u207b\u00b9\u00b9 m\u00b3 kg\u207b\u00b9 s\u207b\u00b2) - \\( M \\) = Mass of central body (kg) - \\( r \\) = Distance between centers (m) - \\( a \\) = Semi-major axis (m) - \\( v \\) = Orbital velocity (m/s) - \\( \\mathbf{r}, \\mathbf{v} \\) = Position and velocity vectors These formulas are properly formatted using LaTeX mathematical notation and will: 1. Copy correctly to any technical document 2. Render properly in Markdown/LaTeX editors 3. Maintain clear mathematical formatting 4. Be easily editable for different scenarios Would you like me to: 1. Add dimensional analysis for each equation? 2. Provide concrete examples with Earth orbital parameters? 3. Show the derivation of any particular formula? Key Parameters: \\( G \\) = 6.674\u00d710\u207b\u00b9\u00b9 m\u00b3/kg/s\u00b2 (Gravitational constant) \\( M \\) = Central body mass (kg) \\( r \\) = Orbital radius (m) \\( a \\) = Semi-major axis (m) \\( v \\) = Orbital velocity (m/s) These equations will: - Copy perfectly to any Markdown editor - Render correctly in Jupyter/VSCode/GitHub - Maintain clean formatting - Work in LaTeX documents **3.2.2 Visualization & Analysis Static Trajectory Plot 4.3.1. Fundamental Equations Newton's Law of Gravitation \\[ \\mathbf{F} = -\\frac{GMm}{r^2}\\hat{\\mathbf{r}} \\] Equations of Motion (2D) \\[ \\begin{cases} \\dfrac{d^2x}{dt^2} = -\\dfrac{GMx}{(x^2+y^2)^{3/2}} \\\\ \\dfrac{d^2y}{dt^2} = -\\dfrac{GMy}{(x^2+y^2)^{3/2}} \\end{cases} \\] 2. Velocity Thresholds Circular Orbit Velocity \\[ v_{\\text{circ}} = \\sqrt{\\dfrac{GM}{r}} \\] Escape Velocity \\[ v_{\\text{esc}} = \\sqrt{\\dfrac{2GM}{r}} \\] 3. Energy Conditions Specific Orbital Energy \\[ E = \\dfrac{v^2}{2} - \\dfrac{GM}{r} \\] Energy State Trajectory Type Mission Scenario \\( E < 0 \\) Elliptical Stable orbit \\( E = 0 \\) Parabolic Escape trajectory \\( E > 0 \\) Hyperbolic Flyby maneuvers 4. Mission Applications Orbital Insertion \\[ \\Delta v_{\\text{insert}} = \\sqrt{\\dfrac{GM}{r}} - v_{\\text{current}} \\] Deorbit Burn \\[ \\Delta v_{\\text{deorbit}} = v_{\\text{circ}} - \\sqrt{\\dfrac{GM}{a_{\\text{new}}}} \\] Hohmann Transfer \\[ \\Delta v_{\\text{total}} = \\sqrt{\\dfrac{GM}{r_1}}\\left(\\sqrt{\\dfrac{2r_2}{r_1+r_2}}-1\\right) + \\sqrt{\\dfrac{GM}{r_2}}\\left(1-\\sqrt{\\dfrac{2r_1}{r_1+r_2}}\\right) \\] 5. Atmospheric Reentry Ballistic Coefficient \\[ \\beta = \\dfrac{m}{C_d A} \\] Deceleration Force \\[ F_{\\text{drag}} = \\dfrac{1}{2}\\rho v^2 C_d A \\] These formulas will: 1. Copy perfectly to any technical document 2. Render correctly in Markdown/LaTeX editors 3. Maintain proper mathematical formatting 4. Work in Jupyter notebooks and VS Code 4.4. Orbital Trajectory Formulas (Short Version):** Gravity Force F = G\u00b7M\u00b7m / r\u00b2 (G=6.67\u00d710\u207b\u00b9\u00b9, M=Earth mass) Orbit Speed v\u2092 = \u221a(GM/r) Example: 400km altitude \u2192 ~7.7 km/s Escape Speed v\u2091 = \u221a(2GM/r) \u2248 1.414\u00d7v\u2092 Same example \u2192 ~10.9 km/s Trajectory Types : E < 0 : Ellipse (E = \u00bdv\u00b2 - GM/r) E = 0 : Parabola (escape) E > 0 : Hyperbola Orbit Period T = 2\u03c0\u221a(a\u00b3/GM) (a = semi-major axis) Key Numbers (Earth) : - Radius: 6,371 km - 400km orbit: 7.67 km/s - Escape: 11.2 km/s (surface) Key Features: Physics Implementation: Solves Newton's gravitational equations numerically Handles both circular/elliptical orbits and escape trajectories Accounts for launch angle and altitude Visual Output: Shows 4 distinct trajectory types Earth drawn to scale (radius ~6371 km) Color-coded paths with starting markers Includes velocity formulas on plot Example Cases: Blue: Stable circular orbit (ISS-like, 7.7 km/s) Green: Elliptical orbit (8.5 km/s) Red: Escape trajectory (11 km/s) Orange: Suborbital path (45\u00b0 launch)","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#trajectories-of-freely-released-payloads-near-earth","text":"","title":"Trajectories of Freely Released Payloads Near Earth"},{"location":"1%20Physics/2%20Gravity/Problem_3/#311-key-results-visualization","text":"","title":"3.1.1 Key Results &amp; Visualization"},{"location":"1%20Physics/2%20Gravity/Problem_3/#simulation-output","text":"Interpretation: - Circular (7.67 km/s) : Stable orbit (ISS-like) - Elliptical (9.0 km/s) : Higher apoapsis - Escape (11.0 km/s) : Parabolic departure - Hyperbolic (5.83 km/s) : High-velocity flyby","title":"Simulation Output"},{"location":"1%20Physics/2%20Gravity/Problem_3/#314-applications","text":"","title":"3.1.4 Applications"},{"location":"1%20Physics/2%20Gravity/Problem_3/#space-mission-scenarios","text":"Satellite Deployment Optimal release at perigee for fuel efficiency Typical \u0394v < 50 m/s for separation Space Debris Re-entry Deorbit burns reduce velocity to < 7.6 km/s Elliptical decay trajectories Lunar/Interplanetary Transfers Hohmann transfers (elliptical) Gravity assists (hyperbolic)","title":"Space Mission Scenarios"},{"location":"1%20Physics/2%20Gravity/Problem_3/#design-considerations","text":"Release altitude affects atmospheric drag Velocity vector determines trajectory shape Payload mass irrelevant in vacuum (all objects fall equally)","title":"Design Considerations"},{"location":"1%20Physics/2%20Gravity/Problem_3/#315-conclusion","text":"Trajectory Types : Determined by initial velocity and position Energy Threshold : 0 MJ/kg separates bound/unbound orbits Mission Planning : Requires precise \u0394v calculations Numerical Methods : Essential for accurate predictions Extension Ideas : - Add J2 oblateness effects - Incorporate atmospheric drag models - Simulate multi-body gravity (Moon perturbations)","title":"3.1.5 Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_3/#321","text":"Here are the orbital mechanics formulas in proper mathematical notation:","title":"**3.2.1"},{"location":"1%20Physics/2%20Gravity/Problem_3/#1-newtons-law-of-universal-gravitation","text":"\\[ \\mathbf{F} = -G \\frac{m_1 m_2}{r^2} \\mathbf{\\hat{r}} \\]","title":"1. Newton's Law of Universal Gravitation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#2-circular-orbital-velocity","text":"\\[ v_{\\text{circ}} = \\sqrt{\\frac{GM}{r}} \\]","title":"2. Circular Orbital Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_3/#3-escape-velocity","text":"\\[ v_{\\text{esc}} = \\sqrt{\\frac{2GM}{r}} = \\sqrt{2} \\cdot v_{\\text{circ}} \\]","title":"3. Escape Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_3/#4-specific-orbital-energy","text":"\\[ \\varepsilon = \\frac{v^2}{2} - \\frac{GM}{r} \\]","title":"4. Specific Orbital Energy"},{"location":"1%20Physics/2%20Gravity/Problem_3/#5-orbital-period-keplers-third-law","text":"\\[ T = 2\\pi \\sqrt{\\frac{a^3}{GM}} \\]","title":"5. Orbital Period (Kepler's Third Law)"},{"location":"1%20Physics/2%20Gravity/Problem_3/#6-vis-viva-equation","text":"\\[ v^2 = GM \\left( \\frac{2}{r} - \\frac{1}{a} \\right) \\]","title":"6. Vis-Viva Equation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#7-eccentricity-vector","text":"\\[ \\mathbf{e} = \\frac{\\mathbf{v} \\times \\mathbf{h}}{GM} - \\frac{\\mathbf{r}}{r} \\]","title":"7. Eccentricity Vector"},{"location":"1%20Physics/2%20Gravity/Problem_3/#8-angular-momentum","text":"\\[ \\mathbf{h} = \\mathbf{r} \\times \\mathbf{v} \\] Where: - \\( G \\) = Gravitational constant (6.67430 \u00d7 10\u207b\u00b9\u00b9 m\u00b3 kg\u207b\u00b9 s\u207b\u00b2) - \\( M \\) = Mass of central body (kg) - \\( r \\) = Distance between centers (m) - \\( a \\) = Semi-major axis (m) - \\( v \\) = Orbital velocity (m/s) - \\( \\mathbf{r}, \\mathbf{v} \\) = Position and velocity vectors These formulas are properly formatted using LaTeX mathematical notation and will: 1. Copy correctly to any technical document 2. Render properly in Markdown/LaTeX editors 3. Maintain clear mathematical formatting 4. Be easily editable for different scenarios Would you like me to: 1. Add dimensional analysis for each equation? 2. Provide concrete examples with Earth orbital parameters? 3. Show the derivation of any particular formula?","title":"8. Angular Momentum"},{"location":"1%20Physics/2%20Gravity/Problem_3/#key-parameters","text":"\\( G \\) = 6.674\u00d710\u207b\u00b9\u00b9 m\u00b3/kg/s\u00b2 (Gravitational constant) \\( M \\) = Central body mass (kg) \\( r \\) = Orbital radius (m) \\( a \\) = Semi-major axis (m) \\( v \\) = Orbital velocity (m/s) These equations will: - Copy perfectly to any Markdown editor - Render correctly in Jupyter/VSCode/GitHub - Maintain clean formatting - Work in LaTeX documents","title":"Key Parameters:"},{"location":"1%20Physics/2%20Gravity/Problem_3/#322-visualization-analysis","text":"Static Trajectory Plot","title":"**3.2.2 Visualization &amp; Analysis"},{"location":"1%20Physics/2%20Gravity/Problem_3/#431-fundamental-equations","text":"","title":"4.3.1. Fundamental Equations"},{"location":"1%20Physics/2%20Gravity/Problem_3/#newtons-law-of-gravitation","text":"\\[ \\mathbf{F} = -\\frac{GMm}{r^2}\\hat{\\mathbf{r}} \\]","title":"Newton's Law of Gravitation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#equations-of-motion-2d","text":"\\[ \\begin{cases} \\dfrac{d^2x}{dt^2} = -\\dfrac{GMx}{(x^2+y^2)^{3/2}} \\\\ \\dfrac{d^2y}{dt^2} = -\\dfrac{GMy}{(x^2+y^2)^{3/2}} \\end{cases} \\]","title":"Equations of Motion (2D)"},{"location":"1%20Physics/2%20Gravity/Problem_3/#2-velocity-thresholds","text":"","title":"2. Velocity Thresholds"},{"location":"1%20Physics/2%20Gravity/Problem_3/#circular-orbit-velocity","text":"\\[ v_{\\text{circ}} = \\sqrt{\\dfrac{GM}{r}} \\]","title":"Circular Orbit Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_3/#escape-velocity","text":"\\[ v_{\\text{esc}} = \\sqrt{\\dfrac{2GM}{r}} \\]","title":"Escape Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_3/#3-energy-conditions","text":"","title":"3. Energy Conditions"},{"location":"1%20Physics/2%20Gravity/Problem_3/#specific-orbital-energy","text":"\\[ E = \\dfrac{v^2}{2} - \\dfrac{GM}{r} \\] Energy State Trajectory Type Mission Scenario \\( E < 0 \\) Elliptical Stable orbit \\( E = 0 \\) Parabolic Escape trajectory \\( E > 0 \\) Hyperbolic Flyby maneuvers","title":"Specific Orbital Energy"},{"location":"1%20Physics/2%20Gravity/Problem_3/#4-mission-applications","text":"","title":"4. Mission Applications"},{"location":"1%20Physics/2%20Gravity/Problem_3/#orbital-insertion","text":"\\[ \\Delta v_{\\text{insert}} = \\sqrt{\\dfrac{GM}{r}} - v_{\\text{current}} \\]","title":"Orbital Insertion"},{"location":"1%20Physics/2%20Gravity/Problem_3/#deorbit-burn","text":"\\[ \\Delta v_{\\text{deorbit}} = v_{\\text{circ}} - \\sqrt{\\dfrac{GM}{a_{\\text{new}}}} \\]","title":"Deorbit Burn"},{"location":"1%20Physics/2%20Gravity/Problem_3/#hohmann-transfer","text":"\\[ \\Delta v_{\\text{total}} = \\sqrt{\\dfrac{GM}{r_1}}\\left(\\sqrt{\\dfrac{2r_2}{r_1+r_2}}-1\\right) + \\sqrt{\\dfrac{GM}{r_2}}\\left(1-\\sqrt{\\dfrac{2r_1}{r_1+r_2}}\\right) \\]","title":"Hohmann Transfer"},{"location":"1%20Physics/2%20Gravity/Problem_3/#5-atmospheric-reentry","text":"","title":"5. Atmospheric Reentry"},{"location":"1%20Physics/2%20Gravity/Problem_3/#ballistic-coefficient","text":"\\[ \\beta = \\dfrac{m}{C_d A} \\]","title":"Ballistic Coefficient"},{"location":"1%20Physics/2%20Gravity/Problem_3/#deceleration-force","text":"\\[ F_{\\text{drag}} = \\dfrac{1}{2}\\rho v^2 C_d A \\] These formulas will: 1. Copy perfectly to any technical document 2. Render correctly in Markdown/LaTeX editors 3. Maintain proper mathematical formatting 4. Work in Jupyter notebooks and VS Code","title":"Deceleration Force"},{"location":"1%20Physics/2%20Gravity/Problem_3/#44-orbital-trajectory-formulas-short-version","text":"Gravity Force F = G\u00b7M\u00b7m / r\u00b2 (G=6.67\u00d710\u207b\u00b9\u00b9, M=Earth mass) Orbit Speed v\u2092 = \u221a(GM/r) Example: 400km altitude \u2192 ~7.7 km/s Escape Speed v\u2091 = \u221a(2GM/r) \u2248 1.414\u00d7v\u2092 Same example \u2192 ~10.9 km/s Trajectory Types : E < 0 : Ellipse (E = \u00bdv\u00b2 - GM/r) E = 0 : Parabola (escape) E > 0 : Hyperbola Orbit Period T = 2\u03c0\u221a(a\u00b3/GM) (a = semi-major axis) Key Numbers (Earth) : - Radius: 6,371 km - 400km orbit: 7.67 km/s - Escape: 11.2 km/s (surface) Key Features: Physics Implementation: Solves Newton's gravitational equations numerically Handles both circular/elliptical orbits and escape trajectories Accounts for launch angle and altitude Visual Output: Shows 4 distinct trajectory types Earth drawn to scale (radius ~6371 km) Color-coded paths with starting markers Includes velocity formulas on plot Example Cases: Blue: Stable circular orbit (ISS-like, 7.7 km/s) Green: Elliptical orbit (8.5 km/s) Red: Escape trajectory (11 km/s) Orange: Suborbital path (45\u00b0 launch)","title":"4.4. Orbital Trajectory Formulas (Short Version):**"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Here\u2019s a complete explanation of the mathematical model and Python code to visualize the wave interference pattern. 1. Mathematical Model A wave originating from a point source at \\((x_0, y_0)\\) is described by the equation: \\[ \\eta(x, y, t) = \\frac{A}{\\sqrt{r}} \\cos(kr - \\omega t + \\phi) \\] where: - \\( A \\) is the wave amplitude. - \\( k = \\frac{2\\pi}{\\lambda} \\) is the wave number (related to the wavelength \\( \\lambda \\) ). - \\( \\omega = 2\\pi f \\) is the angular frequency ( \\( f \\) is the frequency). - \\( r = \\sqrt{(x - x_0)^2 + (y - y_0)^2} \\) is the distance from the source at \\((x_0, y_0)\\) to the point \\((x, y)\\) . - \\( \\phi \\) is the initial phase. For multiple wave sources (e.g., placed at the vertices of a regular polygon), the total interference pattern is obtained by summing all individual waves: \\[ \\eta_{sum}(x, y, t) = \\sum_{i=1}^{N} \\eta_i(x, y, t) \\] where \\( N \\) is the number of wave sources. 2. Python Simulation This Python code simulates and visualizes the interference pattern caused by multiple wave sources placed at the vertices of a regular polygon. \ud83d\udccc Key Steps in the Code: Define source positions : Place wave sources at the vertices of a chosen polygon. Calculate wave contributions : Compute waves from each source. Apply superposition : Sum all wave contributions. Plot the interference pattern : Visualize the result. The generated graph represents the wave interference pattern on a water surface, where multiple wave sources are placed at the vertices of a regular polygon (e.g., hexagon). What the graph shows: Red and blue regions : Represent areas of constructive and destructive interference . Red areas indicate wave peaks reinforcing each other (high displacement). Blue areas indicate wave troughs reinforcing each other (low displacement). Alternating patterns : Form due to the superposition of waves from multiple sources. Circular wavefronts : Originate from each source, interfering with others to create a complex pattern.","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#1-mathematical-model","text":"A wave originating from a point source at \\((x_0, y_0)\\) is described by the equation: \\[ \\eta(x, y, t) = \\frac{A}{\\sqrt{r}} \\cos(kr - \\omega t + \\phi) \\] where: - \\( A \\) is the wave amplitude. - \\( k = \\frac{2\\pi}{\\lambda} \\) is the wave number (related to the wavelength \\( \\lambda \\) ). - \\( \\omega = 2\\pi f \\) is the angular frequency ( \\( f \\) is the frequency). - \\( r = \\sqrt{(x - x_0)^2 + (y - y_0)^2} \\) is the distance from the source at \\((x_0, y_0)\\) to the point \\((x, y)\\) . - \\( \\phi \\) is the initial phase. For multiple wave sources (e.g., placed at the vertices of a regular polygon), the total interference pattern is obtained by summing all individual waves: \\[ \\eta_{sum}(x, y, t) = \\sum_{i=1}^{N} \\eta_i(x, y, t) \\] where \\( N \\) is the number of wave sources.","title":"1. Mathematical Model"},{"location":"1%20Physics/3%20Waves/Problem_1/#2-python-simulation","text":"This Python code simulates and visualizes the interference pattern caused by multiple wave sources placed at the vertices of a regular polygon.","title":"2. Python Simulation"},{"location":"1%20Physics/3%20Waves/Problem_1/#key-steps-in-the-code","text":"Define source positions : Place wave sources at the vertices of a chosen polygon. Calculate wave contributions : Compute waves from each source. Apply superposition : Sum all wave contributions. Plot the interference pattern : Visualize the result. The generated graph represents the wave interference pattern on a water surface, where multiple wave sources are placed at the vertices of a regular polygon (e.g., hexagon).","title":"\ud83d\udccc Key Steps in the Code:"},{"location":"1%20Physics/3%20Waves/Problem_1/#what-the-graph-shows","text":"Red and blue regions : Represent areas of constructive and destructive interference . Red areas indicate wave peaks reinforcing each other (high displacement). Blue areas indicate wave troughs reinforcing each other (low displacement). Alternating patterns : Form due to the superposition of waves from multiple sources. Circular wavefronts : Originate from each source, interfering with others to create a complex pattern.","title":"What the graph shows:"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1 Mathematical Formulation for Equivalent Resistance Using Graph Theory The equivalent resistance \\( R_{eq} \\) of a circuit can be determined using the following mathematical principles: 1. Series Combination For two resistors in series , the total resistance is simply the sum of the individual resistances: \\[ R_{\\text{eq}} = R_1 + R_2 + R_3 + \\dots + R_n \\] Condition: The same current flows through all resistors. 2. Parallel Combination For two or more resistors in parallel , the total resistance is given by the reciprocal formula: \\[ \\frac{1}{R_{\\text{eq}}} = \\frac{1}{R_1} + \\frac{1}{R_2} + \\frac{1}{R_3} + \\dots + \\frac{1}{R_n} \\] or in a compact form: \\[ R_{\\text{eq}} = \\left( \\sum_{i=1}^{n} \\frac{1}{R_i} \\right)^{-1} \\] Condition: The voltage across all resistors is the same. 3. Graph-Based Formulation Given a circuit represented as a graph \\( G = (V, E) \\) , where: - \\( V \\) is the set of nodes (junctions). - \\( E \\) is the set of edges (resistors with weights representing resistance values). We can define: - Adjacency Matrix \\( A \\) , where \\( A_{ij} \\) stores resistance values between nodes. - Conductance Matrix \\( G = A^{-1} \\) (for parallel resistors, conductance is additive). The effective resistance between two nodes \\( i \\) and \\( j \\) is computed using Kirchhoff\u2019s Laws and Laplacian Matrix \\( L \\) : \\[ R_{eq} = (L^+)_{ii} + (L^+)_{jj} - 2(L^+)_{ij} \\] where \\( L^+ \\) is the Moore-Penrose Pseudoinverse of the Laplacian Matrix \\( L \\) . This method is useful for complex circuits with multiple loops and connections. Example Calculations Example 1: Simple Series Circuit Given \\( R_1 = 5\u03a9 \\) and \\( R_2 = 10\u03a9 \\) , the equivalent resistance is: \\[ R_{\\text{eq}} = 5\u03a9 + 10\u03a9 = 15\u03a9 \\] Example 2: Simple Parallel Circuit Given \\( R_1 = 6\u03a9 \\) and \\( R_2 = 3\u03a9 \\) : \\[ R_{\\text{eq}} = \\left(\\frac{1}{6} + \\frac{1}{3}\\right)^{-1} = \\left(\\frac{1}{6} + \\frac{2}{6}\\right)^{-1} = \\left(\\frac{3}{6}\\right)^{-1} = 2\u03a9 \\] Circuit Graph Tool Visualizes & calculates resistance in circuits: How It Works Nodes = Connection points Edges = Resistors (shows \u03a9 value) Key Features add_resistor() \u2192 Build circuit visualize() \u2192 Show circuit diagram equivalent_resistance() \u2192 Calculate total R Auto-Simplifies Merges series resistors (R\u2081 + R\u2082) Combines parallel resistors (1/(1/R\u2081 + 1/R\u2082)) Test Examples Series: 10\u03a9 + 20\u03a9 \u2192 30\u03a9 Parallel: 10\u03a9\u222520\u03a9 \u2192 6.67\u03a9 Bridge circuit \u2192 1\u03a9 Problem 1.2 Here are the mathematical formulas for calculating equivalent resistance: 1. Series Resistance For resistors connected in series, the equivalent resistance is the sum of all resistances: \\[ R_{\\text{eq}} = R_1 + R_2 + R_3 + \\dots + R_n \\] 2. Parallel Resistance For resistors connected in parallel, the reciprocal of the equivalent resistance is the sum of the reciprocals of each resistance: \\[ \\frac{1}{R_{\\text{eq}}} = \\frac{1}{R_1} + \\frac{1}{R_2} + \\frac{1}{R_3} + \\dots + \\frac{1}{R_n} \\] For two resistors in parallel: \\[ R_{\\text{eq}} = \\frac{R_1 R_2}{R_1 + R_2} \\] 3. Combination of Series and Parallel Circuits If a circuit consists of both series and parallel resistances, apply the formulas iteratively: 1. Simplify parallel resistances first using: [ R_{\\text{parallel}} = \\frac{R_1 R_2}{R_1 + R_2} ] Then, add series resistances using: [ R_{\\text{eq}} = R_{\\text{series}} + R_{\\text{parallel}} ] These formulas allow step-by-step reduction of any complex circuit using graph theory or iterative simplification . \ud83d\ude80 Explanation of the Graph The graph represents the final equivalent circuit after simplifying a complex resistor network. Nodes (A and D) : These represent electrical junctions or terminals in the circuit. Edge (30\u03a9) : The line between A and D represents a resistor with a resistance value of 30 ohms (\u03a9) . Graph Simplification : The original circuit likely had multiple resistors connected in series and parallel . Through graph-based circuit analysis , they were reduced to a single equivalent resistance of 30\u03a9 between nodes A and D. Visualization : The large circles at nodes A and D highlight the key connection points in the final simplified circuit.","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#mathematical-formulation-for-equivalent-resistance-using-graph-theory","text":"The equivalent resistance \\( R_{eq} \\) of a circuit can be determined using the following mathematical principles:","title":"Mathematical Formulation for Equivalent Resistance Using Graph Theory"},{"location":"1%20Physics/5%20Circuits/Problem_1/#1-series-combination","text":"For two resistors in series , the total resistance is simply the sum of the individual resistances: \\[ R_{\\text{eq}} = R_1 + R_2 + R_3 + \\dots + R_n \\] Condition: The same current flows through all resistors.","title":"1. Series Combination"},{"location":"1%20Physics/5%20Circuits/Problem_1/#2-parallel-combination","text":"For two or more resistors in parallel , the total resistance is given by the reciprocal formula: \\[ \\frac{1}{R_{\\text{eq}}} = \\frac{1}{R_1} + \\frac{1}{R_2} + \\frac{1}{R_3} + \\dots + \\frac{1}{R_n} \\] or in a compact form: \\[ R_{\\text{eq}} = \\left( \\sum_{i=1}^{n} \\frac{1}{R_i} \\right)^{-1} \\] Condition: The voltage across all resistors is the same.","title":"2. Parallel Combination"},{"location":"1%20Physics/5%20Circuits/Problem_1/#3-graph-based-formulation","text":"Given a circuit represented as a graph \\( G = (V, E) \\) , where: - \\( V \\) is the set of nodes (junctions). - \\( E \\) is the set of edges (resistors with weights representing resistance values). We can define: - Adjacency Matrix \\( A \\) , where \\( A_{ij} \\) stores resistance values between nodes. - Conductance Matrix \\( G = A^{-1} \\) (for parallel resistors, conductance is additive). The effective resistance between two nodes \\( i \\) and \\( j \\) is computed using Kirchhoff\u2019s Laws and Laplacian Matrix \\( L \\) : \\[ R_{eq} = (L^+)_{ii} + (L^+)_{jj} - 2(L^+)_{ij} \\] where \\( L^+ \\) is the Moore-Penrose Pseudoinverse of the Laplacian Matrix \\( L \\) . This method is useful for complex circuits with multiple loops and connections.","title":"3. Graph-Based Formulation"},{"location":"1%20Physics/5%20Circuits/Problem_1/#example-calculations","text":"","title":"Example Calculations"},{"location":"1%20Physics/5%20Circuits/Problem_1/#example-1-simple-series-circuit","text":"Given \\( R_1 = 5\u03a9 \\) and \\( R_2 = 10\u03a9 \\) , the equivalent resistance is: \\[ R_{\\text{eq}} = 5\u03a9 + 10\u03a9 = 15\u03a9 \\]","title":"Example 1: Simple Series Circuit"},{"location":"1%20Physics/5%20Circuits/Problem_1/#example-2-simple-parallel-circuit","text":"Given \\( R_1 = 6\u03a9 \\) and \\( R_2 = 3\u03a9 \\) : \\[ R_{\\text{eq}} = \\left(\\frac{1}{6} + \\frac{1}{3}\\right)^{-1} = \\left(\\frac{1}{6} + \\frac{2}{6}\\right)^{-1} = \\left(\\frac{3}{6}\\right)^{-1} = 2\u03a9 \\] Circuit Graph Tool Visualizes & calculates resistance in circuits: How It Works Nodes = Connection points Edges = Resistors (shows \u03a9 value) Key Features add_resistor() \u2192 Build circuit visualize() \u2192 Show circuit diagram equivalent_resistance() \u2192 Calculate total R Auto-Simplifies Merges series resistors (R\u2081 + R\u2082) Combines parallel resistors (1/(1/R\u2081 + 1/R\u2082)) Test Examples Series: 10\u03a9 + 20\u03a9 \u2192 30\u03a9 Parallel: 10\u03a9\u222520\u03a9 \u2192 6.67\u03a9 Bridge circuit \u2192 1\u03a9","title":"Example 2: Simple Parallel Circuit"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-12","text":"Here are the mathematical formulas for calculating equivalent resistance:","title":"Problem 1.2"},{"location":"1%20Physics/5%20Circuits/Problem_1/#1-series-resistance","text":"For resistors connected in series, the equivalent resistance is the sum of all resistances: \\[ R_{\\text{eq}} = R_1 + R_2 + R_3 + \\dots + R_n \\]","title":"1. Series Resistance"},{"location":"1%20Physics/5%20Circuits/Problem_1/#2-parallel-resistance","text":"For resistors connected in parallel, the reciprocal of the equivalent resistance is the sum of the reciprocals of each resistance: \\[ \\frac{1}{R_{\\text{eq}}} = \\frac{1}{R_1} + \\frac{1}{R_2} + \\frac{1}{R_3} + \\dots + \\frac{1}{R_n} \\] For two resistors in parallel: \\[ R_{\\text{eq}} = \\frac{R_1 R_2}{R_1 + R_2} \\]","title":"2. Parallel Resistance"},{"location":"1%20Physics/5%20Circuits/Problem_1/#3-combination-of-series-and-parallel-circuits","text":"If a circuit consists of both series and parallel resistances, apply the formulas iteratively: 1. Simplify parallel resistances first using: [ R_{\\text{parallel}} = \\frac{R_1 R_2}{R_1 + R_2} ] Then, add series resistances using: [ R_{\\text{eq}} = R_{\\text{series}} + R_{\\text{parallel}} ] These formulas allow step-by-step reduction of any complex circuit using graph theory or iterative simplification . \ud83d\ude80","title":"3. Combination of Series and Parallel Circuits"},{"location":"1%20Physics/5%20Circuits/Problem_1/#explanation-of-the-graph","text":"The graph represents the final equivalent circuit after simplifying a complex resistor network. Nodes (A and D) : These represent electrical junctions or terminals in the circuit. Edge (30\u03a9) : The line between A and D represents a resistor with a resistance value of 30 ohms (\u03a9) . Graph Simplification : The original circuit likely had multiple resistors connected in series and parallel . Through graph-based circuit analysis , they were reduced to a single equivalent resistance of 30\u03a9 between nodes A and D. Visualization : The large circles at nodes A and D highlight the key connection points in the final simplified circuit.","title":"Explanation of the Graph"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"}]}